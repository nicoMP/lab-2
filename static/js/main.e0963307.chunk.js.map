{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["player1","state","Grid","row","length","fill","message","grid","useState","gridState","updateGrid","y","player","id","Row","props","corX","Space","cor","coor","split","x","tempArray","map","arr","slice","onClick","hzCount","x0","y0","x1","vCount","y1","pSlope","nSlope","calculateWin","includes","checkFilled","style","backgroundColor","className","App","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0963307.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react'; \n\nlet player1 = true;\nlet state = 0;\nfunction App() {\n  if(state === 0){\n  return (\n    <div className=\"App\">\n      <header id ='title'>Connect 4</header>\n      <Grid/>\n      <button onClick = {restart} id = 'restart'>Restart</button>\n    </div>\n  );}\n  function restart(){\n    window.location.reload();\n  }\n}\n\nfunction Grid(){\n  var row = [];\n  row.length = 6;\n  row.fill('empty');\n  var grid = [row,row,row,row,row,row,row];\n  const [gridState, updateGrid] = useState(grid);\n  var y = 5;\n  var message;\n  var player = player1 ? 'player 1': 'player 2';\n  switch(state){\n    case 0:\n      message = player + \"'s turn.\";\n      break;\n    case 1:\n      message = player + \" won!!!!!\";\n      break;\n    case -1:\n      message = \"Game Over\";\n      break;\n    default:\n      message = \"This is an error probably\";\n      \n  }\n  return(\n      <div>\n        <table id = 'grid'>\n          <tbody>\n            <Row y = {y--}/><Row y = {y--}/><Row y = {y--}/><Row y = {y--}/><Row y = {y--}/><Row y = {y--}/>\n          </tbody>\n        </table>\n        <p id = 'message'>{message}</p>\n      </div>\n    \n  );\n\n\nfunction Row(props){\n    var corX = 0;\n    return (\n      <tr>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n        <Space cor = {corX++ + ','+props.y }/>\n      </tr>\n    );\n  }\n\n  function Space(props){\n    var coor = props.cor.split(',');\n    var x = coor[0];\n    var y = coor[1];\n    var tempArray = gridState.map(function(arr) {\n      return arr.slice();\n  });\n    function handleClick(){\n      if(gridState[x][y] === 'empty' && gridState[x][y-1] !== 'empty' && state === 0){\n        tempArray[x][y] = player1 ? 'red' : 'yellow';\n        updateGrid(tempArray);\n        calculateWin(tempArray, coor);\n        checkFilled(tempArray);\n        player1 = (state === 1) ? player1 : !player1;\n      }\n    }\n\n    function calculateWin(grid, coor)\n    {\n      \n      var player = player1 ? 'red':'yellow';\n      var hzCount = 0;\n      (function(){\n        const x0 = coor[0];\n        const y0 = coor[1];\n        for(var x = x0 ; x <=6;){\n          if(grid[x++][y0] === player){\n          hzCount++;\n          }\n          else x=100;\n        }\n        for(var x1 = x0 ; x1 >= 1;){\n          if(grid[--x1][y0] === player){\n          hzCount++;\n          }\n          else x1=-1;\n        }\n        \n      }());\n      var vCount = 0;\n      (function(){\n        const x0 = coor[0];\n        const y0 = coor[1];\n        for(var y = y0 ; y <=5;){\n          if(grid[x0][y++] === player){\n          vCount++;\n          }\n          else y=100;\n        }\n        for(var y1 = y0 ; y1 >= 1;){\n          if(grid[x0][--y1] === player){\n          vCount++;\n          }\n          else y1=-1;\n        }\n        \n        \n      }());\n      var pSlope = 0;\n      (function(){\n        var x0 = coor[0];\n        var y0 = coor[1];\n        var x1 = x0-1, y1 =y0-1;\n        \n        while(x0 <= 6 && y0 <= 5 && x0 >= 0 && y0 >=0){\n          if(grid[x0++][y0++]===player){\n            pSlope++;\n          }\n          else  x0 = -1\n        }\n        while(x1 <= 6 && y1 <= 5 && x1 >= 0 && y1 >=0){\n          if(grid[x1--][y1--] ===player){\n            pSlope++;\n          }\n          else  x1 = -1\n        }\n        \n\n\n      }());\n      var nSlope = 0;\n      (function(){\n        var x0 = coor[0];\n        var y0 = coor[1];\n        var x1 = x0, y1 =y0;\n        \n        while(x0 <= 6 && y0 <= 5 && x0 >= 0 && y0 >=0){\n          if(grid[x0++][y0--]===player){\n            nSlope++;\n          }\n          else  x0 = -1\n        }\n        while(x1 <= 6 && y1 <= 4 && x1 > 0 && y1 >=0){\n          if(grid[--x1][++y1] ===player){\n            nSlope++;\n          }\n          else  x1 = -1\n        }\n        \n\n\n      }());\n      if(hzCount >= 4 || vCount >= 4 || pSlope >= 4 || nSlope >= 4 ){\n        state = 1;\n      }\n\n    }\n    function checkFilled(grid){\n        var x = 0;\n        var empty = grid[x++].includes('empty') || grid[x++].includes('empty') || \n        grid[x++].includes('empty') || grid[x++].includes('empty') || grid[x++].includes('empty') || grid[x++].includes('empty') || grid[x++].includes('empty');\n        if(!empty) {state = -1}; \n    }\n    return (\n      <th>\n      <button onClick = {handleClick} style = {{backgroundColor: gridState[x][y]}} className = 'connect4Button'></button>\n      </th>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}